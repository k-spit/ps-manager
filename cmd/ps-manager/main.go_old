package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"os/exec"
	"runtime"
	"time"
)

var clear map[string]func() //create a map for storing clear funcs

var f *os.File

func init() {
	clear = make(map[string]func()) //Initialize it
	clear["linux"] = func() {
		cmd := exec.Command("clear") //Linux example, its tested
		cmd.Stdout = os.Stdout
		cmd.Run()
	}
}

func callClear() {
	value, ok := clear[runtime.GOOS] //runtime.GOOS -> linux, windows, darwin etc.
	if ok {                          //if we defined a clear func for that platform:
		value() //we execute it
	} else { //unsupported platform
		panic("Your platform is unsupported! I can't clear terminal screen :(")
	}
}

func logg(text string) {
	log.Println(text)
}

func main() {
	for {
		time.Sleep(1 * time.Second)
		callClear()
		out, err := exec.Command("bash", "-c", "ps -eo pcpu,pid,user,args --no-headers | sort -t. -nk1,2 -k4,4 -r").Output()
		if err != nil {
			go log.Println("could not run os command!")
			return
		}
		fmt.Println(string(out))
		var b []byte = make([]byte, 1)
		fmt.Println((string(b)))
		fmt.Println("\n\n\n" + "Enter pid:")

		reader := bufio.NewReader(os.Stdin)
		line, _ := reader.ReadString('\n')
		fmt.Println(line)

		cmd := exec.Command("bash", "-c", "kill -9 "+line) //Linux example, its tested
		cmd.Stdout = os.Stdout
		cmd.Run()

	}
}
